.TH UTF 6 "" "" "Inferno Reference "
.PP
.SH NAME
UTF, Unicode, ASCII \- character set and format
.PP
.SH DESCRIPTION
The Inferno character set and representation are based on the Unicode Standard and on the ISO multibyte UTF\-8 encoding (Universal Character Set Transformation Format, 8 bits wide).
The Unicode Standard represents its characters in 16 bits; UTF\-8 represents such values in an 8\-bit byte stream.
Throughout this manual, UTF\-8 is shortened to UTF.
.PP
Internally, programs store individual Unicode characters as 16\-bit values.
However, any external manifestation of textual information, in files or at the interface between programs, uses the machine\-independent, byte\-stream encoding called UTF.
.PP
UTF is designed so the 7\-bit ASCII set (values hexadecimal 00 to 7F), appear only as themselves in the encoding.
Characters with values above 7F appear as sequences of two or more bytes with values only from 80 to FF.
.PP
The UTF encoding of the Unicode Standard is backward compatible with ASCII: Inferno programs handle ASCII text, as well as uninterpreted byte streams, without special arrangement.
However, programs that perform semantic processing on characters must convert from UTF to Unicode in order to work properly with non\-ASCII input.
Normally, all necessary conversions are done by the Limbo compiler and execution environment, but sometimes more is necessary, such as when a program receives UTF input one byte at a time; see 
.I byte2char
for routines to handle such processing.
.PP
A Unicode character 
.I x
(in binary format) is converted to a multibyte UTF sequence as follows:
.IP
.EX
  01. x in [00000000.0bbbbbbb] \[rs](\-> 0bbbbbbb
  10. x in [00000bbb.bbbbbbbb] \[rs](\-> 110bbbbb, 10bbbbbb
  11. x in [bbbbbbbb.bbbbbbbb] \[rs](\-> 1110bbbb, 10bbbbbb, 10bbbbbb
.EE
.PP
Conversion 
.I 01
provides a one\-byte sequence that spans the ASCII character set in a compatible way.
Conversions 
.I 10
and 
.I 11
represent higher\-valued characters as sequences of two or three bytes with the high bit set.
Inferno does not support the 4\-, 5\-, and 6\-byte sequences proposed by X\-Open.
When there are multiple ways to encode a value, for example rune 0, the shortest encoding is used.
.PP
In the inverse mapping, any sequence except those described above is incorrect and is converted to the Unicode value of hexadecimal 0080.
.PP
.SH SEE ALSO
.I byte2char
