.TH SH 1 "" "" "Inferno Reference "
.PP
.SH NAME
sh \- command line interface to the Inferno system
.PP
.SH SYNOPSIS
.IP
.EX
sh [file]
.EE
.PP
.SH DESCRIPTION
The sh program provides a user level interface (a shell) to the Inferno system.
It reads input lines, identifies a 
.I command
and arguments for that command, and arranges for execution of the corresponding Inferno module.
.PP
If a file is named as a command line argument, that file is the source of input; otherwise, standard input is read.
.PP
There are features that allow input/output redirection, creating pipelines, and performing tasks in background.
.PP
.SS STARTING THE SHELL
In desktop\-oriented configurations, the shell is started as part of system initialization.
The shell can also be started from an existing shell (e.g., to process a script file), or from another program (e.g., the window manager has a button for creating new shells).
.PP
.SS COMMAND LINE SYNTAX
Each line consists of one or more 
.I command pipelines
each separated by either an ampersand (&) (which indicates that the pipeline should be run in background) or a semi\-colon (;).
The semi\-colon need not be provided for the last command pipeline on a line.
.PP
Command pipelines are not allowed to span lines.
.PP
Each 
.I command pipeline
consists of one or more 
.I commands
separated by a vertical bar (|) character.
The standard output of one command is made the standard input of the next command to the right.
.PP
Re\-direction of input/output to pipes takes precedence over re\-direction from/to files.
.PP
In the limit case, a command pipeline consists of a single command with no pipes.
.PP
A 
.I command
consists of one or more 
.I fields
.
The first (leftmost) field is the 
.I command field.
It is used to determined the executable file to be loaded and run; see below.
The remaining fields are parsed and become 
.I command line arguments
that are passed to the module\[aq]s init function as a list of strings.
.PP
.SS FINDING THE MODULE
The 
.I command field
is converted to the pathname of the Dis file of some module.
That field can be either an absolute pathname, starting from /, or a relative pathname from the current directory.
.PP
As a convenience, the user need not specify the .dis suffix to the filename.
If missing, it will be added by the shell.
.PP
If the load fails there is, in general, a second attempt to load the module by resolving the pathname relative to the /dis directory (the general system repository of Dis files).
.PP
There are two exceptions to this second attempt.
The second load attempt is not performed if the command field provides an absolute pathname or a relative pathname starting with dot\-slash (./).
Such explicit naming is taken to mean that the user will accept no substitutions.
.PP
The shell requires that the Dis file implement a module with an interface equivalent to the Command module as specified in /module/sh.m.
Otherwise, the named file will not load.
.PP
.SS FILE NAME EXPANSION
Command line arguments (including the command field itself) are expanded by the shell according to the regular expression rules described in 
.I filepat
.
.PP
This expansion is not applied to the filenames used for input/output redirection.
.PP
.SS COMMENTS
Any input following a # on a line is discarded.
.PP
.SS QUOTING
The shell special characters can be stripped of their special meaning and treated as literals by enclosing them in single quotes.
.PP
Inside a quoted string, the special meaning of the single quote can be removed by immediately following it with another single quote.
Command lines with un\-terminated quoted strings are rejected and cause an error message.
.PP
.SS EXAMPLES:
.IP
.EX
pcsrb.mh.lucent.com$ echo \[aq]\[aq]\[aq]\[aq]
[aq]
pcsrb.mh.lucent.com$ echo \[aq]don\[aq]\[aq]t\[aq]
don\[aq]t
pcsrb.mh.lucent.com$ echo \[aq]hello\[aq] \[aq]world
sh: unmatched quote
pcsrb.mh.lucent.com$ echo \[aq]a\[aq]b
ab
pcsrb.mh.lucent.com$ echo a\[aq]b\[aq]
ab
pcsrb.mh.lucent.com$
.EE
.PP
.SS SHELL SPECIAL CHARACTERS
.PP
.TS
tab(@);
l l.
T{
[aq] \[aq]
T}@T{
Blank: 
.I whitespace
, except in a quoted string.
T}
T{
[rs]t
T}@T{
Tab: 
.I whitespace
, except in a quoted string.
T}
T{
[rs]n
T}@T{
Newline: command line terminator.
T}
T{
#
T}@T{
Start of comment
T}
T{
[aq] (single quote)
T}@T{
Start of/end of quoted string.
T}
T{
| (vertical bar)
T}@T{
Interface between commands in a command pipeline.
T}
T{
&
T}@T{
Terminator for command pipelines to be run in background.
T}
T{
;
T}@T{
Terminator for command pipelines to be run synchronously by the shell.
T}
T{
>
T}@T{
Output re\-direction for a command.
T}
T{
<
T}@T{
Input re\-direction for a command.
T}
.TE
.PP
.TS
tab(@);
l.
T{
T}
.TE
.PP
.SS PROMPT
The shell uses a user prompt consisting of the system name as provided by /dev/sysname suffixed by \[dq]$\[dq]
.PP
.SS INPUT/OUTPUT RE\-DIRECTIONS
By default, standard input is the console keyboard and standard output the console display.
Each command can arrange for standard input to be taken from a file and for standard output to be written to a file.
.PP
Attempts to redirect standard input to a non\-existing file will fail.
Redirecting standard output to an non\-existing file will cause the creation of that file.
The destination file already exists, it will be overwritten.
Any previous contents are lost.
.PP
In cases of competing re\-direction mechanisms (re\-direct to a file and to a pipe), the pipe has precedence.
.PP
.SS BACKGROUND TASKS
In general, the shell will wait for the termination of a 
.I command pipeline
(including the limit case of a single command) before continuing execution (e.g., prompting the user for the next command).
However, if the command pipeline is terminated by an ampersand (&) character, the wait stage is skipped and the shell continues execution immediately while the command pipeline executes as a background task.
.PP
.SS NAME SPACE CONCERNS
When started, the shell creates an independent file name space that is a copy of the file name space of the shell\[aq]s creator.
.PP
Command pipelines that are started synchronously by the shell are executed by threads that share the shell\[aq]s name space.
If those commands modify the file name space (and they have not mimicked the shell in creating their own independent name space), those modifications will be perceived by the shell when it continues execution.
See 
.I bind
and 
.I pctl
.
.PP
Command pipelines that are started asynchronously by the shell (background tasks) are implicitly given an independent, duplicate file name space.
.PP
.SH FILES
/prog/
.I n
/wait
.PP
.SH SEE ALSO
.PP
.TS
tab(@);
l l.
T{
.I bind

T}@T{
Modifying the file name space.
T}
T{
.I filepat

T}@T{
Details of pattern expansion of file names.
T}
T{
.I pipe

T}@T{
Details of pipe facilities.
T}
T{
.I sh

T}@T{
Description of the interface for \[aq]command\[aq] modules.
T}
T{
.I pctl

T}@T{
See Notes on name space management.
T}
T{
.I cons

T}@T{
Details of /dev/sysname used in the shell prompt.
T}
T{
.I prog

T}@T{
Details of the /prog/
.I n
/wait interface.
T}
.TE
.PP
.TS
tab(@);
l.
T{
T}
.TE
.PP
.SH NOTES
This is a deliberately rudimentary shell designed for debugging applications.
It is 
.I not
intended to serve as a general\-purpose programmable shell.
