.TH DRAW-POINT 3 "" "" "Inferno Reference "
.PP
.SH NAME
Point \- coordinate position
.PP
.SH SYNOPSIS
.IP
.EX
include  \[dq]draw.m\[dq];
draw:= load Draw Draw\->PATH;
Point: adt
{
  x:   int;
  y:   int;
  add: fn(p: self Point, q: Point): Point;
  sub: fn(p: self Point, q: Point): Point;
  mul: fn(p: self Point, i: int):   Point;
  div: fn(p: self Point, i: int):   Point;
  eq:  fn(p: self Point, q: Point): int;
  in:  fn(p: self Point, r: Rect):  int;
};
.EE
.PP
.SH DESCRIPTION
The Point data type specifies a position in the integer grid.
.PP
.TS
tab(@);
l l.
T{
x, y
T}@T{
The coordinate position.
The coordinates increase to the right (
.I x
) and down (
.I y
).
T}
T{

.I p
.add (
.I q
)
T}@T{
Returns the point (
.I p
.x+
.I q
.x, 
.I p
.y+
.I q
.y).
T}
T{

.I p
.sub (
.I q
)
T}@T{
Returns the point (
.I p
.x\-
.I q
.x, 
.I p
.y\-
.I q
.y).
T}
T{
p.mul (i)
T}@T{
Returns the point (
.I p
.x*
.I i
, 
.I p
.y*
.I i
).
T}
T{

.I p
.div (
.I i
)
T}@T{
Returns the point (
.I p
.x/
.I i
, 
.I p
.y/
.I i
).
T}
T{

.I p
.eq (
.I q
)
T}@T{
Returns non\-zero if the points\[aq] coordinates are equal and zero otherwise.
T}
T{

.I p
.in (
.I rect
)
T}@T{
Returns 1 if point 
.I p
is within rectangle 
.I rect
, 0 if outside.
T}
.TE
.PP
.TS
tab(@);
l.
T{
T}
.TE
.PP
.SH SEE ALSO
.PP
.TS
tab(@);
l l.
T{
.I Limbo Draw Modules

T}@T{
Description of coordinate system
T}
.TE
.PP
.TS
tab(@);
l.
T{
T}
.TE
