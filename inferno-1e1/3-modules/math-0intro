.TH MATH-0INTRO 3 "" "" "Inferno Reference "
.PP
.SH NAME
Limbo Math Modules
.PP
The Limbo Math models are as follows:
.PP
.SH MATH MODULES
.PP
.TS
tab(@);
l l.
T{
.I elem

T}@T{
elementary functions of applied mathematics
T}
T{
.I fp

T}@T{
floating point operations
T}
T{
.I linalg

T}@T{
linear algebra primitives
T}
.TE
.PP
.TS
tab(@);
l.
T{
T}
.TE
.PP
.SH SYNOPSIS
.IP
.EX
include \[dq]math.m\[dq];
math:= load Math Math\->PATH;
.EE
.PP
.SH DESCRIPTION
Inferno\[aq]s math module and Limbo compiler provide the fundamental floating point environment and \[aq]elementary functions\[aq].
.PP
Limbo expressions involving only literal and named constants are evaluated at compile time with all exceptions ignored.
However, arithmetic on variables is left to run\-time, even if data path analysis shows the value to be a compile time constant.
This implies that tools generating Limbo source must do their own simplification, and not expect the compiler to change x/x into 1, or \-(y\-x) into x\-y, or even x\-0 into x.
Negation, \-x, changes the sign of x, as opposed to computing 0.\-x, which gives a different result for x=0.
.PP
Subexpression elimination and other forms of code motion may be done by the compiler, but not across calls to the mode and status functions described in 
.I fp
.
Removal of parentheses or factoring is not performed by the compiler.
The evaluation order of a+b+c follows the parse tree and is therefore the same as for (a+b)+c.
These rules are the same as for Fortran and the C language.
.PP
Contracted multiply\-add instructions (with a single rounding) are not generated by the compiler, though they may be used in the native BLAS (linear algebra) libraries.
All arithmetic follows the IEEE floating point standard, except that denormalized numbers may be replaced by flush\-to\-0, depending on what the hardware makes feasible.
.PP
Binary/decimal conversion is properly rounded.
In particular, printing a real using%g and reading it on a different machine is guaranteed to recover identical bits, including conversions done by the compiler.
The one exception is that smaller, faster, but sloppier run\-time conversion routines may be used when mandated by limited memory embedded systems.
Programmers may assume, however, that the features described in these man pages are present in all Inferno systems intended for general computing.
