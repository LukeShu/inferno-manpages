.TH MISC-IR 3 "" "" "Inferno Reference "
.PP
.SH NAME
ir \- infrared remote control
.PP
.SH SYNOPSIS
.IP
.EX
include   \[dq]ir.m\[dq];
ir     := load Ir Ir\->PATH;    # for real remotes
simir  := load Ir Ir\->SIMPATH; # for keyboard simulator

init:      fn(irc: chan of int): int;
translate: fn(key: int)        : int;
.EE
.PP
.SH DESCRIPTION
Programs running with the 
.I Limbo Prefab Modules
toolkit are controlled by an infrared remote control device.
If such a device is not present, the system may simulate it from the keyboard by loading the module in file Ir\->SIMPATH.
The Ir module defines codes for representing the remote control keys (see below).
They are typically sent over the Context.cir (see 
.I context
) channel, which is managed by 
.I mux
.
.PP
.TS
tab(@);
l l.
T{
init
T}@T{
The init function takes the appropriate actions to initialize the device, and then spawns a process to return the codes on the 
.I irc
channel.
This is done for both the real and simulated devices.
Init is typically invoked once, such as by 
.I mux
, and the codes are then multiplexed between the applications.
Most programs need not call init.
T}
T{
translate
T}@T{
The translate function converts the device\[aq]s raw codes into the constants defined by the module.
For example, with the simulated remote control, translate(\[aq]3\[aq]) returns Three.
Translate is only necessary for programs that wish to manage their own simulation of the remote control.
T}
.TE
.PP
.TS
tab(@);
l.
T{
T}
.TE
.PP
.SH CODES
.PP
.TS
tab(@);
l l l.
T{
T}@T{
T}@T{

.B Keyboard
.B Equivalent

T}
T{
ChanUP, ChanDN
T}@T{
The Channel\-Up and Channel\-Down buttons.
T}@T{
r and c
T}
T{
Enter
T}@T{
The Enter button.
T}@T{
SPACE bar
T}
T{
EOF
T}@T{
An end of file from the remote device.
After sending one, no more codes will be sent on 
.I irc
.
T}@T{
T}
T{
Error
T}@T{
An unknown or invalid input from the remote device.
T}@T{
T}
T{
FF, Rew
T}@T{
The Fast\-Forward and Rewind buttons.
T}@T{
k and j
T}
T{
Mute
T}@T{
The Mute button.
T}@T{
none
T}
T{
Power
T}@T{
The Power button.
T}@T{
Delete key
T}
T{
Rcl
T}@T{
The Recall button.
Typical applications do not see this command.
Instead, the mux program intercepts the command and reactivates its menu.
T}@T{
x
T}
T{
Record
T}@T{
The Record button.
T}@T{
none
T}
T{
Select
T}@T{
The Select button.
T}@T{
Return or Enter key
T}
T{
Up, Dn
T}@T{
The Up and Down buttons.
T}@T{
i and m
T}
T{
VolUP, VolDN
T}@T{
The Volume\-Up and Volume\-Down buttons.
T}@T{
t and v
T}
T{
Zero, One, Two, etc.
T}@T{
The digit buttons, 0 through 9.
T}@T{
corresponding numeral keys
T}
.TE
.PP
.TS
tab(@);
l.
T{
T}
.TE
.PP
.SH EXAMPLES
Application programs using the remote control run under 
.I mux
, which creates a graphics context for the application.
This context includes channels to the mux program and to the Ir device: Draw\->Context.ctomux and Draw\->Context.cir.
The following example establishes communication with mux and then reads Ir commands until it sees Enter.
.IP
.EX
implement Command;
 
include \[dq]sys.m\[dq]; 
include \[dq]draw.m\[dq]; 
include \[dq]ir.m\[dq]; 
Command: module 
{
  init: fn(ref Draw\->Context; list of string);
};
init(ctxt: ref Draw\->Context; argv: list of string); 
{
  sys:= load Sys Sys\->PATH;  
  # Tell mux to start sending input.  
  ctxt.ctomux <\-= Draw\->AMstartinput;  
   for(;;) {   
       key:= <\-ctxt.cir;   
        sys\->print(\[dq]command %d\[rs]n\[dq], key);   
         if(key == Ir\->Enter)    
              break;  
   }  
# Tell mux this thread is going away.  
ctxt.ctomux <\-= Draw\->AMexit; 
} 
.EE
.PP
Programs such as 
.I mux
that drive the remote control directly must load the appropriate module and initialize it.
This example uses the absence of a simulator module to infer that a real remote control is available.
.IP
.EX
implement Irtest; 
include \[dq]sys.m\[dq]; 
include \[dq]draw.m\[dq]; 
include \[dq]ir.m\[dq]; 
Irtest: module 
{  
   init: fn(ctxt: ref Draw\->Context, argv: list of string); 
}; 
init(nil: ref Draw\->Context, nil: list of string) 
{   
    sys:= load Sys Sys\->PATH;   
    # First try the keyboard Ir simulator.   
    # If that is not present, use Ir directly.   
    ir:= load Ir Ir\->SIMPATH;   
    if(ir == nil)     
        ir = load Ir Ir\->PATH;   
    if(ir == nil){     
        sys\->print(\[dq]Ir module not loaded: %r\[rs]n\[dq]);     
        return;   
    }   
irc:= chan of int;   
if(ir\->init(irc) < 0){     
      sys\->print(\[dq]Can\[aq]t initialize Ir device: %r\[rs]n\[dq]);     
        return;   
    }   
      for(;;){     
              irval:= <\-irc;     
      sys\->print(\[dq]command %d\[rs]n\[dq], irval);   
    } 
}
.EE
.PP
.SH SEE ALSO
.I limbo
, 
.I Limbo Modules
, and 
.I Limbo Draw Modules
