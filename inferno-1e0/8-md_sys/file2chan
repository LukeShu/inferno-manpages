.TH FILE2CHAN 8
.PP
.SH NAME
file2chan \- create file connected to Limbo channel
.SH SYNOPSYS
.IP
.EX
include \[dq]sys.m\[dq];
sys:= load Sys Sys\->PATH;
Rread: type chan of (array of byte, string);
Rwrite: type chan of (int,          string);
FileIO: adt
{
    read:  chan of (int, int,           int, Rread);
    write: chan of (int, array of byte, int, Rwrite);
};
file2chan: fn(dir, file: string, flags: int): ref FileIO;
.EE
.PP
.SH DESCRIPTION
The 
.I file2chan
function provides an interface for creating a Limbo channel and an associated entry (
.I file
) in the file name space.
A 
.I client
communicates with the server using 
.I open
, 
.I read
and 
.I write
.
The system transforms the client\[aq]s file operations into tuples that are delivered to the server on the channel associated with 
.I file
.
When the server responds, the client\[aq]s file operations complete.
.PP
Although 
.I file
semantics are used, the goal does not have to be the creation of a server to replicate the duties of existing file systems (for example, persistent storage of data).
The server can be designed to provide new services.
.PP
.SS FILE2CHAN (DIR, FILE, FLAGS)
The 
.I file2chan
function returns a 
.I FileIO
type holding two channels used by the system to deliver 
.I Tread
and 
.I Twrite
Styx messages to the server.
See 
.I Introduction to Limbo Modules
in Chapter 7.
The arguments are:
.PP
.TS
tab(@);
l l.
T{
dir
T}@T{
The existing directory where the 
.I file
is to be created.
T}
T{
file
T}@T{
The 
.I file
created by 
.I file2chan
.
It is held in a directory containing just that one file unioned in 
.I dir
.
T}
T{
flags
T}@T{
The 
.I flags
argument specifies how that union is created.
See 
.I 
bind, mount, unmount \- change file name space
.I  
.I  for a description of the flags.

T}
.TE
.PP
.TS
tab(@);
l.
T{
T}
.TE
.PP
.SS READS
When the client invokes the read 
.I system
call on the file, the server receives a tuple, 
.I (offset, count, fid, rc)
, on the 
.I read
channel of returned 
.I ref FileIO
.
The server should interpret that request as follows:
.PP
.TS
tab(@);
l l.
T{
offset
T}@T{
The offset from the beginning of the file.
T}
T{
count
T}@T{
The size of the data request.
T}
T{
fid
T}@T{
An unique identifier for managing multiplexed requests on 
.I file
.
T}
T{
rc
T}@T{
The channel for delivery of the requested data.
T}
.TE
.PP
.TS
tab(@);
l.
T{
T}
.TE
.PP
To allow the client to complete its 
.I read
request successfully, the server should respond by sending into 
.I rc
a tuple, 
.I (data, nil)
, where 
.I data
satisfies the client\[aq]s request.
.PP
To create an unsuccessful 
.I read
request for the client, the server should respond on 
.I rc
with a tuple,(
.I nil, errmsg
), where 
.I errmsg
is a string describing the error condition.
The 
.I errmsg
string becomes the system error for the client (See 
.I print, fprint, sprint \- print formatted output
).
.PP
The client blocks in its 
.I read
system call until the server sends its reply.
.PP
.SS WRITES
When the client does a 
.I write
system call on the file, the server receives a tuple, (
.I offset, data, fid, wc
), on the 
.I write
channel of the returned 
.I ref FileIO
.
That request should be interpreted as follows:
.PP
.TS
tab(@);
l l.
T{
offset
T}@T{
The offset from the beginning of the file where the 
.I data
should be written.
T}
T{
data
T}@T{
The data to be written into the file.
T}
T{
fid
T}@T{
An unique identifier for managing multiplexed requests on 
.I file
.
T}
T{
wc
T}@T{
A channel for delivery of a write\-response message.
T}
.TE
.PP
.TS
tab(@);
l.
T{
T}
.TE
.PP
The server should respond with a tuple (
.I count, string
) on 
.I wc,
the 
.I 
channel received in the tuple from the 
.I write
channel.
To indicate a successful 
.I write
operation to the client the server\[aq]s response should be (
.I count, nil
), where 
.I count
is the number of bytes (for example, 
.I len data
) received from the client.
.PP
To make the client\[aq]s 
.I write
request fail, the server\[aq]s response should be (
.I 0, errmsg
), where 
.I errmsg
describes the problem.
The 
.I errmsg
string becomes the system error for the client (See 
.I print, fprint, sprint \- print formatted output
).
.PP
The client blocks in its 
.I write
system call until the server sends its reply.
.PP
.SS CLOSES
When file is closed for reading (writing), the server will receive a 
.I read
(
.I write
) message with a 
.I nil rc
(
.I wc
).
The server can use these events to determine when to stop processing for a given 
.I fid
.
.PP
.SS FID\[AQ]S
The 
.I fid
received by the server can be used to manage the multiplexing of multiple active clients sharing a single file.
See 
.I Introduction to Limbo Modules
in Chapter 7 for details.
.PP
.SH CAVEAT
The 
.I read
and 
.I write
system calls for the file will not return until the server sends its reply on the appropriate channel.
Consequently, the process doing the 
.I read
or 
.I write
should not be the one serving, to avoid deadlock.
.PP
.SH SEE ALSO
.PP
.TS
tab(@);
l.
T{
.I Limbo System Module

T}
T{
.I bind, mount, unmount \- change file name space

T}
T{
.I open, create \- open/create a file for reading or writing

T}
T{
.I read, write, stream \- read, write, or stream file

T}
T{
.I print, fprint, sprint \- print formatted output

T}
T{

.I 
Introduction to Limbo Modules
.I  in Chapter 7
.I 

T}
.TE
.PP
.TS
tab(@);
l.
T{
T}
.TE
