.TH 0INTRO 9
.PP
.PP
.SH NAME
Inferno Security Modules and Utilities
.SH SYNOPSYS
.PP
   *   *   *   *   *
.PP
.PP
   *   *   *   *   *
.PP

.B NOTE:

.PP

.I U.S.
Department of Commerce and U.S.
State Department regulations restrict the export of certain security algorithms.
These restricted algorithms include DES and RC4 (with key length greater than 40 bits).
Anyone wanting to purchase Inferno with DES and a version of RC4 supporting a key size greater than 40 bits should contact Lucent Technologies at the phone number listed in the 
readme
.I  file delivered with Inferno.

.SH INTRODUCTION TO SECURITY
This is an introduction to some of the principals behind computer security as well as a description of how these principals are used in Inferno.
More detailed descriptions of the methods and principals for ensuring secure communications on computers can be found in texts such as 
.I Applied Cryptography
by Bruce Schneier (published 1996, J. Wiley & Sons, Inc.).
.PP
Inferno provides several levels of security:
.IP \[bu] 2
Mutual authentication means that two users or applications that want to communicate can establish that they are who they say they are.
This is the most basic level of security provided by Inferno.
It means, for example, that when a user signs on to a service provider that they can establish that they are a legitimate user.
This could be someone accessing a service from a desktop computer or a set\-top box.
.IP \[bu] 2
Message digesting is a technique to ensure that an interloper cannot modify messages sent between users.
.IP \[bu] 2
Encryption protects the confidentiality of messages so that only the party or parties for whom the messages are intended can decrypt and read them.
.RS 2
.PP
Inferno makes it easy to enforce any one or all of these levels of security.
.RE
.PP
.SS MUTUAL AUTHENTICATION
Authentication requires a combination of elements: a third party that each user can trust, an algorithm or mathematical method to secure messages between users, and a protocol for exchanging messages that ensures that a third party or intruder cannot pretend to be one of the users, or use some other method to undermine their communication.
.PP
One important method for authenticating users in Inferno is the use of digital signatures.
Like signing a letter a digital signature testifies to the identity of the sender.
Fortunately, it is much more difficult to forge a digital signature.
.PP
Even after users are authenticated to each other, it is possible for someone \[ga]listening\[aq] to their communication to read and possibly modify their messages without the users knowing it.
So authentication solves one security requirement, but not all of them.
.PP
.SS MESSAGE DIGESTING
Message digesting uses a mathematical hashing algorithm to take a message and digest it into an indecipherable string of fixed length.
By appending the hashed value to a message, the authenticity of the message can be verified.
The recipient takes the message, applies the same hashing algorithm used by the sender, and compares the value to the one sent.
If the values are the same, then the message received must be the same as the one that was sent.
This techniques assures that a message was not modified
.PP
Inferno includes a counter in the message digest to ensure that messages are received in the correct order and that no messages are inserted by a third party listening in on the line.
.PP
A message digest ensures that no one has tampered with a message.
It does not prevent someone from reading it.
.PP
.SS MESSAGE ENCRYPTION
The traditional notion of encryption is translating a message, called a plaintext in cryptography, into something unreadable, called a ciphertext.
Its most obvious use is to provide confidentiality.
Only someone able to decrypt the message, or translate it back to its original form, can interpret it.
.PP
A mathematical algorithm is used to both encrypt and decrypt a message.
Encryption algorithms depend on keys or bit strings of a specified length for encryption and decryption.
The nature of an algorithm and the size of the key determine the degree of security.
.PP
Two basic types of algorithms are used in cryptography: private key (or symmetric key) and public key algorithms.
With symmetric algorithms the same key is used to encrypt and decrypt a message.
This key must be a secret, known only to the users who want to communicate.
It is often called a private or secret key.
.PP
A public key algorithm may use a private or secret key to encrypt a message and a public key to decrypt it, or vice\-versa.
The private or secret key is known only to one user.
The public key, however, does not have to be kept secret and may be distributed to anyone the user wishes to communicate with.
.PP
Inferno uses a public key algorithm for digital signatures and symmetric key algorithms for encryption.
.PP
A user can encrypt a message with or without appending a message digest.
.PP
.SS ALGORITHMS SUPPLIED WITH INFERNO
Some of the tradeoffs related to choosing algorithms are speed, degree of security, and export restrictions (the government restricts which algorithms may be exported to other countries as well as the key size of certain algorithms).
The algorithms used in Inferno are well known and rigorously tested.
See the note at the beginning of this chapter for export restrictions.
.PP
.SS ONE\-WAY HASHING ALGORITHMS
SHA and MD5 are well known (in cryptographic circles) one\-way hashing algorithms.
MD5 is a high\-speed, 128\-bit hash.
SHA is a somewhat slower (30%\-50% slower) but more secure 160\-bit hash.
.PP
.SS ELGAMAL PUBLIC KEY SIGNATURE ALGORITHM
ElGamal is a public key system widely used for creating digital signatures.
It uses a private key for signing a message and a public key for verifying it.
The way keys are used in ElGamal will make it easier to adopt a different signature algorithm in Inferno as requirements change.
Other systems that use equivalent keys, where either a private or public key can be used for encryption or decryption, are more difficult to change.
With constant advances in the field of cryptography, one of the design goals of Inferno is to create a security component that will be easy to enhance as new algorithms are developed.
.PP
.SS ENCRYPTION ALGORITHMS
DES (the Data Encryption Standard) was adopted by the U.S.
government in 1976 as a standard encryption/decryption system for unclassified data in the United States.
It is widely used, especially by the financial services industry.
Two types of DES are offered: DES\-ECB and DES\-CBC.
ECB or Electronic Code Book and CBC or Chain Block Coding are part of the ANSI Banking Standard.
CBC is more complex and less vulnerable than ECB.
Both versions of DES provide 56\-bit keys.
Neither is exportable.
.PP
RC4 is a symmetric or private key system that is about 10 times faster than DES and is exportable with a key size of 40 bits.
In the U.S., RC4 permits keys of unlimited length.
If you want to purchase a version of Inferno including DES and RC4 with unlimited key length, see the note at the beginning of this chapter.
.PP
.SS DIFFIE\-HELLMAN KEY EXCHANGE ALGORITHM
Diffie\-Hellman is an algorithm for creating a secret key to be shared by users for encrypting messages (sometimes called a shared secret).
It requires each user to exchange certain information with the other.
This information can be exchanged in the open, that is, without encryption.
Each user is able to create the same, secret key from this information.
However, no one else listening to their exchange would be able to create or determine the secret key.
.PP
.SS SECURITY PROTOCOLS
Cryptanalysis is the study of how to break cryptographic systems.
Attempts to disrupt or listen to confidential communications are called attacks.
Usually the objective of an attack is to figure out the secret key, decrypt a message, or add or modify messages in some way.
.PP
There are many methods or strategies for attacking a confidential communication.
One method is called a man\-in\-the\-middle attack, where someone listening to a communication pretends to be one of the parties; another is a replay attack, where an interloper reuses messages that have already been exchanged in an attempt to discover a pattern.
.PP
In order to thwart such attacks and establish some level of trust between communicating parties, it is necessary to employ certain protocols.
Inferno uses two well established protocols, EKE and STS, to permit keys to be exchanged and the identities of communicating parties to be verified.
The STS protocol is described in more detail later in the chapter.
.PP
.SS USING DIGITAL SIGNATURES
A signature is one way to guarantee that a message sent by a user is indeed from that user and not someone else.
A signature does not require that a message be encrypted.
It can be appended to a message in order to guarantee the identity of the sender.
With ElGamal, creating a signature requires that the user have a secret or private key.
Uniquely associated with the private key is another key that can be distributed publicly.
This public key is used along with the private key to create a signature, and is used by others to verify the signature.
.PP
To create a signature the ElGamal algorithm is applied to a combination of the private key, the public key, and the message to be signed.
The output of the algorithm is the signature.
.PP
To verify the signature the receiver applies the ElGamal algorithm to the public key and the signature.
If the output is the same message that was sent with the signature, then the signature is valid.
This method ensures that the user receiving a message is indeed communicating with someone who owns the public key.
.PP
.SS OBTAINING A CERTIFICATE
The next step is to determine who the owner of the public key is, and to ensure that it belongs to the user that the receiver wants to communicate with.
This is accomplished by having a third party create a certificate testifying to the identity of the owner of the public key.
This third party is called a certifying authority (CA).
If a user trusts the certifying authority, a copy of a certificate is sufficient to determine the ownership of a public key, and therefore, the signature and identity of the user sending a message.
.PP
A certificate includes a variety of information: a user\[aq]s public key, the identity of the user, Diffie\-Hellman parameters, an expiration time for the certificate, and the signature of the CA.
The CA\[aq]s public key is sent to the user along with the certificate to verify the CA\[aq]s signature.
.PP
Inferno provides two different methods for obtaining a certificate depending on whether a user has access to a keyboard or not.
For users with a keyboard, Inferno offers a variation of the Encrypted\-Key\-Exchange (EKE) protocol.
This protocol depends on establishing trust between a user and a CA by transmitting a password out\-of\-band, for example, by letter or phone call.
.PP
For an application or user on a set\-top box, which normally does not have a keyboard, entering a password would be difficult.
Therefore, Inferno provides a different method to establish trust.
When the set\-top box is turned on, it creates a private/public key pair and dials the service provider\[aq]s CA to get a certificate.
The CA returns a certificate blinded or scrambled with a random bit string known only to the CA.
A hashed version of the string is displayed on the user\[aq]s screen.
The user telephones the CA and compares what is displayed with what the CA has sent.
If they match, and the user can prove his or her identity, the CA makes the random bit string known to the user, so the certificate can be unscrambled.
.PP
.SS AUTHENTICATION
Mutual authentication in Inferno requires that two parties who want to communicate must have a certificate from the same CA.
As described above, the public key of the CA is used to check the certificate sent by the other user.
The certificate is used to verify that the public key belongs to the party that the user wants to communicate with.
.PP
If a user can trust the public key, then the key can be used to check the signature sent by the other party.
If the public key unlocks the signature, then whoever sent the signature must have the corresponding secret key, and therefore, must be the owner of the public key.
.PP
.SS PROTOCOL FOR AUTHENTICATION: STS
The following diagrams show how authentication is accomplished in Inferno with the STS or Station\-to\-Station protocol.
.PP
.SS 
.IP
.EX
             alpha**r0(mod p)
                    +
            User 0\[aq]s public key
                    +
  ______   User 0\[aq]s certificate   ______
 / User \[rs]                        / User \[rs]
(    0   )\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\->(    1   )
 \[rs]______/                        \[rs]______/    
.EE
.PP
STS: Step 1
.PP
Figure 9\-1 represents two users, User 0 and User 1, who have already received certificates from the same CA.
In order to authenticate each other, they follow the STS protocol.
First, one user sends the other their public key and certificate along with a computation based on the Diffie\-Hellman parameters contained in their certificate.
These parameters will be used to create a shared secret key between User 0 and User 1.
.PP
.SS STS: STEP 2
.IP
.EX
             alpha**r1(mod p)
                    +
            User 1\[aq]s public key
                    +
  ______   User 1\[aq]s certificate   _____
 / User \[rs]                        / User \[rs]
(    0   )<\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-(    1   )
 \[rs]______/                        \[rs]______/    
.EE
.PP
In Figure 9\-2, User 1 returns a computation based on the same Diffie\-Hellman parameters along with User 1\[aq]s public key and certificate.
With each other\[aq]s public key and certificate, along with the CA\[aq]s public key that each has, User 0 and User 1 can verify that each has the other\[aq]s public key.
All they need now is to provide each other with a signature that can be verified with the other\[aq]s public key to prove that they are indeed communicating with each other and not some third party.
.PP
.SS 
.IP
.EX
sign(User 0\[aq]s public key, alpha**r0(mod p), alpha**r1(modp))
          ______                          ______
         / User \[rs]                        / User \[rs]
        (    0   )\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\->(    1   )
         \[rs]______/                        \[rs]______/    


sign(User 1\[aq]s public key, alpha**r1(mod p), alpha**r0(modp))
          ______                          ______
         / User \[rs]                        / User \[rs]
        (    0   )<\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-(    1   )
         \[rs]______/                        \[rs]______/    
.EE
.PP
STS: Steps 3 and 4
.PP
In Figure 9\-3, each user signs information known to both of them that they can verify.
The computations using the Diffie\-Hellman parameters in this protocol enable User 0 and User 1 to compute a secret value that is known only to them.
This value can be used as a shared secret key to encrypt later communications.
The ability to derive the same key from the computations they passed back and forth such that no one else listening in on this protocol could determine the key, is a property of the Diffie\-Hellman exchange.
.PP
.SH SECURITY AT THE APPLICATION LAYER
An application can make use of the algorithms and protocols described previously by using only a few library routines such as: 
.I login
, 
.I auth
, and 
.I connect
.
The 
.I login
function enables an application, which shares a password with the server acting as the CA, to obtain a certificate.
After obtaining certificates, two applications establish a mutually authenticated connection by calling 
.I auth
.
The 
.I auth
function performs the entire STS protocol.
The 
.I connect
function connects each application to an SSL (security sockets layer) device.
Each application can create message digests or encrypt messages by writing to this device.
Messages are received and decrypted by reading from the SSL device.
.PP
While Inferno provides these routines to make it easy to establish secure communications, an application is not restricted to their use.
Lower\-level routines used by 
.I login
and 
.I auth
are also available to an application.
These routines enable an application to create alternate methods for establishing security, or to perform specialized functions like signing files.
.PP
Inferno also provides security routines tailored for set\-top boxes.
For example, a set\-top\-box can use the 
.I register
routine instead of 
.I login
.
The register routine obtains a certificate without requiring a user to enter a password.
The register routine is demonstrated in the sample application called Mux, described in 
.I The
.I Inferno User\[aq]s Guide
.
.PP
There are also commands described in this section to establish a server as a Certifying Authority or \[aq]signer\[aq].
For example, a CA needs a key and password to create a certificate.
These can be created on the server using the commands 
.I changelogin
and 
.I createsignerkey
.
.PP
.SH SECURITY ACROSS THE NETWORK
In conjunction with the use of namespaces in Inferno, the security layer enables applications to access resources on different platforms in a secure manner.
An application running on a Unix system, for example, can access resources securely on a system running Windows 95 several hops away.
The only requirement is that between the Unix system and the Windows 95 system each connection has been authenticated.
Mutually authenticated connections between servers establish trust across the network.
.PP
.SH SUMMARY OF SECURITY MODULES, UTILITIES, COMMANDS, DAEMONS, AND ABSTRACT DATA TYPES
Implementing security in Inferno involves a number of different components.
Application programs load modules to access security functions; commands are used to set up servers for security purposes, and daemons are initialized to listen for security\-related communications.
.PP
.SS MODULES
Table 9\-1 summarize the security modules covered in this chapter.
The keyring module is defined by 
.I keyring.m
.
Other security modules are defined in 
.I security.m.

.PP
.PD 0
.P
.PD
Summary of security modules
.TS
tab(@);
l l l.
T{
Keyring
T}@T{
auth
T}@T{
performs authentication
T}
T{
T}@T{
readauthinfo
T}@T{
reads the authinfo adt
T}
T{
T}@T{
writeauthinfo
T}@T{
writes the authinfo adt
T}
T{
T}@T{
iptob64
T}@T{
converts integer to base 64 string
T}
T{
T}@T{
b64toip
T}@T{
converts base 64 string to integer
T}
T{
T}@T{
random
T}@T{
generate large, random numbers
T}
T{
T}@T{
bits
T}@T{
returns number of bits of precision
T}
T{
T}@T{
expmod
T}@T{
returns base**exp mod (mod)
T}
T{
T}@T{
eq
T}@T{
compares two IPint adts
T}
T{
T}@T{
iptobytes
T}@T{
converts integer to array of bytes
T}
T{
T}@T{
certtostr
T}@T{
convert ref Certificate to a string
T}
T{
T}@T{
pktostr
T}@T{
convert ref PK to a string
T}
T{
T}@T{
sktostr
T}@T{
convert ref SK to a string
T}
T{
T}@T{
strtocert
T}@T{
convert string to ref Certificate
T}
T{
T}@T{
strtopk
T}@T{
convert string to ref PK
T}
T{
T}@T{
strtosk
T}@T{
convert string to ref SK
T}
T{
T}@T{
sign
T}@T{
create a signed certificate
T}
T{
T}@T{
verify
T}@T{
verify a signed certificate
T}
T{
T}@T{
genSK
T}@T{
generate private, public keys
T}
T{
T}@T{
genSKfromPK
T}@T{
generate SK based on PK parameters
T}
T{
T}@T{
sktopk
T}@T{
extracts PK from SK/PK pair
T}
T{
T}@T{
sha
T}@T{
produce a message digest with sha
T}
T{
T}@T{
md5
T}@T{
produce a message digest with md5
T}
T{
T}@T{
dhparams
T}@T{
creates Diffie\-Hellman parameters
T}
T{
T}@T{
getstring
T}@T{
reads a string from a file descriptor
T}
T{
T}@T{
putstring
T}@T{
writes a string to a file descriptor
T}
T{
T}@T{
getbytearray
T}@T{
reads a byte array from a file descriptor
T}
T{
T}@T{
putbytearray
T}@T{
writes a byte array to a file descriptor
T}
T{
T}@T{
puterror
T}@T{
writes an error string to a file descriptor
T}
T{
SSL
T}@T{
connect
T}@T{
connect to ssl device
T}
T{
T}@T{
secret
T}@T{
provide secrets to ssl connection
T}
T{
Login
T}@T{
login
T}@T{
obtain a certificate
T}
T{
T}@T{
getauthinfo
T}@T{
Tk user interface to login
T}
T{
Password
T}@T{
get
T}@T{
read a password from a password file
T}
T{
T}@T{
put
T}@T{
write a password to a password file
T}
T{
Random
T}@T{
randomint
T}@T{
generate a random number
T}
T{
T}@T{
randombuf
T}@T{
generate an array of random bytes
T}
.TE
.PP
.TS
tab(@);
l.
T{
T}
.TE
.PP
.SS COMMANDS
Table 9\-2 summarizes the commands that are used for security with servers and set\-top boxes:
.PP
.PD 0
.P
.PD
Summary of security\-related commands
.TS
tab(@);
l l.
T{
changelogin
T}@T{
create/update the password file on server
T}
T{
createsignerkey
T}@T{
create the key for the signer server
T}
T{
getauthinfo
T}@T{
create/obtain a certificate for authentication
T}
T{
manufacture
T}@T{
emulate the set\-top box ID in ROM
T}
T{
register
T}@T{
register set\-top box with signer
T}
T{
verify
T}@T{
authenticate receiver of blinded certificate
T}
.TE
.PP
.TS
tab(@);
l.
T{
T}
.TE
.PP
.SS DAEMONS
Table 9\-3 summarizes the daemons that run on a server:
.PP
.PD 0
.P
.PD
Summary of security\-related server daemons
.TS
tab(@);
l l.
T{
countersigner
T}@T{
[ga]unblinds\[aq] a certificate for a client
T}
T{
logind
T}@T{
provide a certificate to a client
T}
T{
signer
T}@T{
sends a blinded certificate to a client
T}
.TE
.PP
.TS
tab(@);
l.
T{
T}
.TE
.PP
.SS ABSTRACT DATA TYPES
The following abstract data types (adts) are defined in the Keyring module:
.PP
.SS SIGALG
The 
.I SigAlg
adt contains a single string that specifies the algorithm used for digital signatures.
The allowable values are 
.I MD5
and 
.I SHA
, which specify which one\-way hash function is used to produce a digital signature, or message digest.
In general, a one\-way hash function converts an arbitrary length message to a unique fixed\-length message digest.

.I MD5
produces a 128\-bit; 
.I SHA
produces a 160\-bit hash.
.PP
.SS PK AND SK
The 
.I PK
adt contains the data necessary to construct a public key; the 
.I SK
adt contains the data necessary to construct a secret key.
Both keys are built from the combination of a specified signature algorithm and a string representing the name of owner of the key.
.PP
.SS CERTIFICATE
The 
.I Certificate
adt contains a digital signature with the certification of the trusted authority (CA), the hash algorithm that is used, the name of the signer and a message expiration date.
.PP
.SS DIGESTSTATE
The 
.I DigestState
adt contains the state of partially completed hash functions during processing.
.PP
.SS AUTHINFO
The 
.I Authinfo
adt contains an individual user\[aq]s private and public key, the signer\[aq]s certificate and the signer\[aq]s public key, and the Diffie\-Hellman parameters.

.I Authinfo
is normally created during login or registration (See 
.I login, getauthinfo \- get an Authinfo adt from a certificate authority
and 
.I register \- command to register set\-top\-box identity with signer
).
.PP
.SS IPINT
The 
.I IPint
adt provides certain cryptographic functions so that various popular public key algorithms can be implemented directly in Limbo.
The current implementation limits the maximum integer to 2^3192^\-1.
.PP
An 
.I IPint
can be converted into two external formats:
.IP \[bu] 2
an array of bytes (in which the first byte is the highest order byte of the integer) that is useful when communicating with the kernel\[aq]s internal 
.I ssl
device (
.I #D
) (see 
.I ssl \- secure sockets layer device
in Chapter 2)
.IP \[bu] 2
a MIME base 64 format that allows an 
.I IPint
to be stored in files or transmitted across networks in text form.
