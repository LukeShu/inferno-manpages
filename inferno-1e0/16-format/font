.TH FONT A "" "" "Inferno Format Specifications"
.PP
.SH NAME
font, subfont \- external format for character fonts and subfonts
.SH SYNOPSYS
.SH DESCRIPTION
Fonts are constructed as a list defining a range of Unicode characters and a subfont containing the character images for that range.
Subfonts are not directly accessible from Limbo.
.PP
.SS FONT FORMAT
External fonts are described by a plain text file that can be read using the 
.I Font.open
function.
The 
.I Font.build
function reads the same format from a string rather than a file.
(See 
.I font \- character images for Unicode text
in Chapter 11).
.PP
The format is a header followed by any number of subfont range specifications.
The header contains two numbers: the 
.I height
and the 
.I ascent
, both in pixels.
The 
.I height
is the inter\-line spacing and the 
.I ascent
is the distance from the top of the line to the baseline.
These numbers should be chosen to consistently display all the subfonts of the font.
.PP
A subfont range specification contains two or three numbers and a file name.
Each field must be followed by some white space.
Each numeric field may be decimal, octal, or hexadecimal in the C language format.
The numbers are the inclusive range of characters covered by the subfont with an optional starting position within the subfont.
.PP
The file name specifies an external file holding the subfont data.
The minimum number of a covered range is mapped to the specified starting position (default zero) of the corresponding subfont.
If the subfont file name does not begin with a slash, it is taken relative to the directory containing the font file.
.PP
.SS SUBFONT FORMAT
External subfonts are represented in a more rigid format.
The components must appear in the following order:
.PP
.SS AN IMAGE CONTAINING CHARACTER IMAGES
The image has the format for external image files described in 
.I image \- external format for images
.
.PP
.SS A SUBFONT HEADER
The subfont header has 3 decimal strings: 
.I n
, 
.I height
, and 
.I ascent
.
Each number is right\-justified and blank padded in 11 characters, followed by a blank.
.PP
.SS CHARACTER INFORMATION
The character 
.I info
consists of 
.I n+1
entries, each 6\-bytes and giving values called 
.I x
(2 bytes, low order byte first), 
.I top
, 
.I bottom
, 
.I left
, and 
.I width
for the successive characters from left to right (in increasing Unicode order) in the subfont.
.PP
The rectangle holding the character is 
.I (x, top, xn, bottom)
, where 
.I xn
is the 
.I x
field of the next character.
.PP
When the character is to be drawn in an image at point 
.I p
, the rectangle is placed at 
.I (p.x+left, p.y)
and the next character to be drawn is placed at 
.I (p.x+width, p.y)
.
.PP
The 
.I x
field of the last entry is used to calculate the image width of the previous character.
The other fields in the last entry can be ignored.
.PP
.SH NOTE
There is a convention of using the character with value zero (
.I nul
) to represent characters of zero width.
This means that fonts should have, as their zero\-th character, a character with non\-zero width.
See the description of the 
.I Image.text
function in 
.I Image \- pictures and drawing
.I .
